import pg from 'pg';
import dotenv from 'dotenv';

dotenv.config();

const { Pool } = pg;

// Configuration avec fallback pour environnement de d√©veloppement sans PostgreSQL
const pool = new Pool({
  user: process.env.DB_USER || 'postgres',
  host: process.env.DB_HOST || 'localhost',
  database: process.env.DB_NAME || 'crm_assurance',
  password: process.env.DB_PASSWORD || 'password',
  port: process.env.DB_PORT || 5432,
  // Ajout de configuration pour g√©rer les erreurs de connexion
  connectionTimeoutMillis: 5000,
  idleTimeoutMillis: 30000,
});

// Test de connexion avec gestion d'erreur am√©lior√©e
pool.on('connect', () => {
  console.log('‚úÖ Connexion PostgreSQL √©tablie');
});

pool.on('error', (err) => {
  console.error('‚ùå Erreur PostgreSQL:', err.message);
  if (err.code === 'ECONNREFUSED') {
    console.log('üí° Conseil: Assurez-vous que PostgreSQL est d√©marr√© et accessible sur le port 5432');
    console.log('üí° Pour Docker: docker run --name postgres -e POSTGRES_PASSWORD=password -p 5432:5432 -d postgres');
  }
});

// Fonction pour tester la connexion de mani√®re gracieuse
export const testConnection = async () => {
  try {
    const client = await pool.connect();
    console.log('‚úÖ Test de connexion PostgreSQL r√©ussi');
    client.release();
    return true;
  } catch (err) {
    console.error('‚ùå Test de connexion PostgreSQL √©chou√©:', err.message);
    return false;
  }
};

export default pool;